{"version":3,"sources":["./src/app/nav-bar/nav-bar.component.ts","./src/app/nav-bar/nav-bar.component.html","./src/app/about/about.component.ts","./src/app/about/about.component.html","./src/environments/environment.ts","./src/app/last-cities/last-cities.component.ts","./src/app/last-cities/last-cities.component.html","./src/app/weather-data.service.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/main-weather/main-weather.component.ts","./src/app/main-weather/main-weather.component.html","./src/app/detail/detail.component.ts","./src/app/detail/detail.component.html","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-nav-bar',\r\n  templateUrl: './nav-bar.component.html',\r\n  styleUrls: ['./nav-bar.component.css']\r\n})\r\nexport class NavBarComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<nav class=\"navbar navbar-expand-md navbar-light\">\r\n  <a href=\"main\" class=\"navbar-brand\">WeatherExpress</a>\r\n  <button type=\"button\" class=\"navbar-toggler\" data-toggle=\"collapse\" data-target=\"#navbarCollapse\">\r\n      <span class=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n\r\n  <div class=\"collapse navbar-collapse right\" id=\"navbarCollapse\">\r\n      <div class=\"navbar-nav\">\r\n          <a routerLink=\"/main\" routerLinkActive=\"is-active\" class=\"nav-item nav-link\">Home</a>\r\n          <a routerLink=\"/detail\" routerLinkActive=\"is-active\" class=\"nav-item nav-link\">WeatherDetail</a>\r\n          <a routerLink=\"/last\" routerLinkActive=\"is-active\" class=\"nav-item nav-link\">Recent Cities</a>\r\n          <a routerLink=\"/about\" routerLinkActive=\"is-active\" class=\"nav-item nav-link\">About</a>\r\n      </div>\r\n      <!-- <div class=\"navbar-nav ml-auto\">\r\n          <a href=\"#\" class=\"nav-item nav-link\">Login</a>\r\n      </div> -->\r\n  </div>\r\n</nav>\r\n<router-outlet></router-outlet>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-about',\r\n  templateUrl: './about.component.html',\r\n  styleUrls: ['./about.component.css']\r\n})\r\nexport class AboutComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n"," <div class=\"row justify-content-center\">\r\n    <div class=\"inner cover\">\r\n        <h1 class=\"cover-heading\">Database Connectivity and Advanced Controls</h1>\r\n        <br>\r\n        <p class=\"lead\">\r\n          This project was created by <strong>Daniel Guana</strong>, <strong>Shahab Ghalamdoost</strong>, <strong>Akshay Adlakha</strong> and <strong>Tarandeep Singh</strong> in 2021.\r\n          <br> All the information regarding weather is obtained with the help of the Open Weather API.</p>\r\n        <p class=\"lead\">\r\n          <a class=\"btn btn-lg btn-secondary\" href=\"https://openweathermap.org/api\">Click here to see the Open Weather API info</a> \r\n        </p>\r\n\r\n        <div class=\"center \">\r\n          <br>\r\n          <table class=\"table table-striped inner cover\">\r\n            <thead>\r\n              <tr>\r\n                  <th colspan=\"3\">Design Diagram</th>                    \r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <th><a class=\"alink\" href=\"https://firebasestorage.googleapis.com/v0/b/groupproject-b4db1.appspot.com/o/LayerAccess.jpg?alt=media&token=6761eb67-020d-483f-9db3-4e6fa9f0ebbd\">Access Layer</a></th>   \r\n                <th><a class=\"alink\" href=\"https://firebasestorage.googleapis.com/v0/b/groupproject-b4db1.appspot.com/o/DataFlow.jpg?alt=media&token=d200e0ea-9a88-4694-89aa-6a2e1981c1bd\">Data Flow</a></th>   \r\n                <th><a class=\"alink\" href=\"https://firebasestorage.googleapis.com/v0/b/groupproject-b4db1.appspot.com/o/DataRequest.jpg?alt=media&token=46f6eddf-afdd-4852-a7ac-87a796430a05\">Data Request</a></th>                    \r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n\r\n          <br>\r\n          <h2>Description</h2>\r\n          <div class=\"justified\">\r\n            <p class=\"lead\">\r\n              <span class=\"orange\">MongooseDB,</span> The WeatherExpress project, uses Cloud-hosted MongoDB service on Azure.\r\n            </p>\r\n            <p class=\"lead\">\r\n              <span class=\"orange\">App_Server,</span> The WeatherExpress project uses the benefits of layer-based design; The app_server layer is responsible to provide data from OpenWeatherMap API and do business over fetched data to provide information for upper layer that is App_API. On this layer, the logic has access to only the database layer and OpenWeatherMap API.\r\n            </p>\r\n            <p class=\"lead\">\r\n              <span class=\"orange\">App_API,</span> is responsible to get the request from the APP_Public layer or any 3rd-party app in the future, and pass the request to the downer layer that is APP_Server to provide information for upper layer. On this layer, the logic has access to only the App_Server layer.\r\n            </p>\r\n            <p class=\"lead\">\r\n              <span class=\"orange\">App_Cron,</span> is a backend service task that runs every one hour to update the database based on the searched cities and update the weather from the OpenWeatherMap. (The reason to have the Cron Schedule is to prevent getting block because of the repeating calling the OpenWeatherMap API.) On this layer, the logic has access to only the App_Server layer.\r\n            </p>\r\n            <p class=\"lead\">\r\n              <span class=\"orange\">App_Public,</span> is responsible to interact with end user to get request and show the information back to the user.\r\n            </p>\r\n          </div>\r\n        </div>\r\n    </div>\r\n</div>","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { SearchedWeatherSchema } from '../weather';\r\nimport { WeatherDataService } from '../weather-data.service';\r\n\r\n@Component({\r\n  selector: 'app-last-cities',\r\n  templateUrl: './last-cities.component.html',\r\n  styleUrls: ['./last-cities.component.css']\r\n})\r\nexport class LastCitiesComponent implements OnInit {\r\n\r\n  public searchedWeathers : SearchedWeatherSchema[];\r\n\r\n  constructor(private weatherService: WeatherDataService, private route: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getSearchedWeathers();\r\n  }\r\n\r\n  private getSearchedWeathers() {\r\n    this.weatherService.getSearchedWeathers().subscribe(foundItem => this.searchedWeathers = foundItem);              \r\n  }\r\n\r\n  public showDetail(res : SearchedWeatherSchema){\r\n    this.route.navigate(['/detail/'+encodeURI(res.name)+'/'+res.country+'/'+res.units]);\r\n  }\r\n\r\n}\r\n","<div class=\"row justify-content-center\">\r\n    <div class=\"info col-5\">\r\n        <h2>Last searches</h2>\r\n        <table class=\"table table-striped\">\r\n            <thead>\r\n                <tr>\r\n                    <th class=\"col\">Name</th>   \r\n                    <th class=\"col\">Country</th>   \r\n                    <th class=\"col\">Units</th>                    \r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr *ngFor=\"let searched of searchedWeathers?.slice().reverse()\">\r\n                    <td><button (click)=\"showDetail(searched)\" class=\"btn btn-primary\">{{searched.name}}</button></td> <!--href=\"/detail/{{searched.name}}/{{searched.country}}/{{searched.units}}\"-->\r\n                    <td>{{searched.country}}</td>    \r\n                    <td>{{searched.units}}</td>                 \r\n                </tr>                             \r\n            </tbody>            \r\n        </table>   \r\n        \r\n    </div>   \r\n</div>","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders} from '@angular/common/http';\r\nimport { SearchedWeatherSchema, WeatherSchema } from './weather';\r\nimport { Observable } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WeatherDataService {\r\n  private apiBaseURL = 'http://localhost:3000/api';\r\n  public math = Math;\r\n  \r\n  public getWeather(name,country,unit) : Observable<WeatherSchema>{\r\n    const url : string = `${this.apiBaseURL}/weathers/${unit}/${name}/${country}`;\r\n    //return this.http.get(url).toPromise().then(response => response[0] as WeatherSchema).catch(this.handleError);\r\n    return this.http.get<WeatherSchema>(url).pipe(catchError(this.handleError));    \r\n  }\r\n\r\n  public getSearchedWeathers(): Observable<SearchedWeatherSchema[]>{\r\n    const url : string = `${this.apiBaseURL}/cities/searched`;\r\n    return this.http.get<SearchedWeatherSchema[]>(url).pipe(catchError(this.handleError));\r\n  }\r\n  \r\n  private handleError(error: any): Promise<any>{\r\n    console.error('Something has gone wrong');\r\n    return Promise.reject(error.message || error);\r\n  }\r\n  constructor(private http: HttpClient) { }\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'weather-angular';\r\n}\r\n","<app-nav-bar></app-nav-bar>\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap'\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { NavBarComponent } from './nav-bar/nav-bar.component';\r\nimport { MainWeatherComponent } from './main-weather/main-weather.component';\r\nimport { RouterModule } from '@angular/router';\r\nimport { DetailComponent } from './detail/detail.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { AboutComponent } from './about/about.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { LastCitiesComponent } from './last-cities/last-cities.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    NavBarComponent,\r\n    MainWeatherComponent,\r\n    DetailComponent,\r\n    AboutComponent,\r\n    LastCitiesComponent,\r\n    \r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    AppRoutingModule,\r\n    NgbModule,\r\n    FormsModule,\r\n    BrowserAnimationsModule,    \r\n    FormsModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport {FormControl} from '@angular/forms';\r\nimport {Observable} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\nimport cities from '../../assets/cities.json';\r\n\r\n@Component({\r\n  selector: 'app-main-weather',\r\n  templateUrl: './main-weather.component.html',\r\n  styleUrls: ['./main-weather.component.css']\r\n})\r\nexport class MainWeatherComponent implements OnInit {\r\n  //Variables  \r\n  public myControl = new FormControl();\r\n  public unitControl = new FormControl();\r\n  public options : string[] = [];\r\n  public filteredOptions : string[] = [];\r\n  public alertMessage = \"\";\r\n\r\n\r\n  public findWeather(): void{\r\n    var inputValue = this.myControl.value;\r\n    //Required validation\r\n    if(!inputValue){\r\n      this.alertMessage =\"The City Name is required\";\r\n      return;\r\n    }\r\n    //Validate if the city entered is on the list\r\n    if(!this.options.filter(c => c.toLowerCase() == inputValue.toString().toLowerCase()).length){\r\n      this.alertMessage = \"The city name is not on the list\"; \r\n      return;\r\n    }\r\n    var nameCountry = inputValue.toString().split(', ');\r\n    //Normalize the string to avoid special characters on the city name (ex. Bogotá - Bogota)\r\n    var name = nameCountry[0];    \r\n        \r\n    //name = this.normalizeText(name);\r\n    name = encodeURI(name);    \r\n    var unit = this.unitControl.value;\r\n    var country = nameCountry[1];\r\n    this.route.navigate(['/detail/'+name+'/'+country+'/'+unit]);\r\n  }  \r\n\r\n  ngOnInit(): void {\r\n    //Made API cities result readable\r\n    for(var i in cities){\r\n      this.options.push(cities[i].name+', '+cities[i].country);\r\n    }\r\n    this.options.sort();\r\n    //Default unit value\r\n    this.unitControl.setValue('metric');\r\n  } \r\n\r\n  public suggest() {\r\n    //get the actual value and removes the special characters\r\n    const filterValue = this.normalizeText(this.myControl.value.toLowerCase());    \r\n    \r\n    if(filterValue){\r\n      this.filteredOptions = this.options.filter(c => this.normalizeText(c.toLowerCase()).startsWith(filterValue)).slice(0, 5);\r\n    }else{\r\n      this.filteredOptions =  [];\r\n    }\r\n  } \r\n\r\n  //remove special characters from the string\r\n  normalizeText(txt : string) : string{\r\n    return txt.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r\n  }\r\n\r\n  public updateInput(value : string){\r\n    this.myControl.setValue(value);    \r\n    //puts the list empty to hide the div\r\n    this.filteredOptions = [];\r\n  }\r\n\r\n  constructor(private route: Router) { }\r\n}\r\n","\r\n<div class=\"mainweather\">\r\n  <div class=\"row justify-content-center\">\r\n      <form (ngSubmit)=\"findWeather()\" name=\"findweather\" #itemForm=\"ngForm\">\r\n          <input autocomplete=\"false\" type=\"text\" id=\"name\" name=\"name\" [formControl]=\"myControl\" placeholder=\"City Name\" (input)=\"suggest()\" required>    \r\n          <div class=\"filteredOptions\"  *ngIf=\"filteredOptions.length\">\r\n            <div (click)=\"updateInput([s])\" *ngFor=\"let s of filteredOptions\">{{s}}</div>\r\n          </div>    \r\n          <select [formControl]=\"unitControl\" class=\"sel\" name=\"units\" id=\"units\">\r\n            <option value=\"metric\" selected=\"selected\">°C</option>\r\n            <option value=\"imperial\">°F</option>\r\n          </select>\r\n          <div>\r\n            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!itemForm.form.valid\" id=\"search\">Find Weather</button>    \r\n          </div>\r\n      </form>        \r\n  </div>\r\n  <div class=\"row justify-content-center\" *ngIf=\"alertMessage\">\r\n    <!-- <div class=\"spinner-border\" role=\"status\">\r\n      <span class=\"sr-only\">Loading...</span>\r\n    </div> -->\r\n    <div class=\"alert alert-danger\" role=\"alert\">\r\n      {{alertMessage}}\r\n    </div>\r\n  </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { SearchedWeatherSchema, WeatherSchema } from '../weather';\r\nimport { WeatherDataService } from '../weather-data.service';\r\n\r\n@Component({\r\n  selector: 'app-detail',\r\n  templateUrl: './detail.component.html',\r\n  styleUrls: ['./detail.component.css']\r\n})\r\nexport class DetailComponent implements OnInit {\r\n\r\n  public weatherResult : WeatherSchema;\r\n  \r\n  constructor(private weatherService: WeatherDataService, private route : ActivatedRoute, private router : Router) { \r\n  }\r\n\r\n  ngOnInit() { \r\n    this.getWeather();  \r\n  } \r\n\r\n  private getWeather(){\r\n    //subscription to support param changes \r\n    this.route.params.subscribe(params => {\r\n        const name = params['name'];\r\n        const country = params['country'];\r\n        const unit = params['unit'];  \r\n        \r\n        if(name!=null || country!=null || unit!=null){\r\n          this.weatherService.getWeather(name,country,unit).subscribe(foundItem => { this.weatherResult = foundItem});   \r\n          console.log(this.weatherResult);           \r\n        }\r\n    });    \r\n  }\r\n}\r\n","<app-main-weather></app-main-weather>\r\n<div class=\"mainDetail\">\r\n    <div class=\"row justify-content-center\" *ngIf=\"weatherResult\">\r\n        <div class=\"info col-4\">\r\n            <img *ngIf=\"weatherResult.weather_icon\" class=\"img-fluid\" src=\"http://openweathermap.org/img/wn/{{weatherResult?.weather_icon}}@2x.png\">      \r\n            <div class='degrees'>{{weatherResult?.main_temp | number: '1.0-0'}}<sup>°{{weatherResult?.units=='metric' ? 'C' : 'F'}}</sup></div>\r\n            <div class='ctyname'>{{weatherResult?.name}}<sup>{{weatherResult?.country}}</sup></div>\r\n            <p>{{weatherResult?.weather_description}}</p>\r\n            <div class='feelslike'>Feels like {{weatherResult?.main_feels_like | number: '1.0-0'}}<sup>°{{weatherResult?.units=='metric' ? 'C' : 'F'}}</sup></div>\r\n            <div>Min temp: {{weatherResult?.main_temp_min | number: '1.0-0'}}<sup>°{{weatherResult?.units=='metric' ? 'C' : 'F'}}</sup> Max temp: {{weatherResult?.main_temp_max | number: '1.0-0'}}<sup>°{{weatherResult?.units=='metric' ? 'C' : 'F'}}</sup></div>\r\n        </div>\r\n    </div>\r\n    <div class=\"row justify-content-center\" *ngIf=\"!weatherResult\">\r\n        <div class=\"alert alert-danger\" role=\"alert\">\r\n          City information not available\r\n        </div>\r\n    </div>\r\n</div>","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { AboutComponent } from './about/about.component';\r\nimport { DetailComponent } from './detail/detail.component';\r\nimport { LastCitiesComponent } from './last-cities/last-cities.component';\r\nimport { MainWeatherComponent } from './main-weather/main-weather.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path:'',\r\n    redirectTo:'main',\r\n    pathMatch:'full'\r\n  },\r\n  {\r\n    path: 'main',\r\n    component: MainWeatherComponent\r\n  },\r\n  {\r\n    path: 'detail/:name/:country/:unit',\r\n    component: DetailComponent\r\n  },\r\n  {\r\n    path: 'detail',\r\n    component: DetailComponent\r\n  },\r\n  {\r\n    path:'about',\r\n    component:AboutComponent\r\n  },\r\n  {\r\n    path:'last',\r\n    component:LastCitiesComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes, { relativeLinkResolution: 'legacy' })],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}